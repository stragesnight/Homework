/* ЗАДАНИЕ 5
	Группа: ПВ-011
	Ученик: Шелест Александр
	task05.cpp - программа/база данных с именами и номерами телефонов с возможностью поиска и добавления. */

#include <iostream>
#include <windows.h>

// вывод списка контактов на экран
//  list - массив контактов
//  size - размер массива
void drawList(std::string* list, int size)
{
	for (int i = 0; i < size; i++)
	{
		// вывод номера контакта и имени
		std::cout << i / 2 + 1 << ". " << list[i++];
		// вывод номера телефона
		std::cout << "\n\t" << list[i] << "\n\n";
	}
}

// добавление нового контакта в массив
//  list  - ссылка на массив для добавления
//  size  - ссылка на размер массива
//  name  - имя нового контакта
//  phone - номер телефона нового контакта
void addEntry(std::string*& list, int& size, std::string name, std::string phone)
{
	// инкремент размера массива
	size += 2;
	// объявление нового массива большего размер
	std::string* newList = new std::string[size];

	// копирование из старого массива в новый
	for (int i = 0; i < size - 2; i++)
		newList[i] = list[i];

	// добавление двух новых элементов в конец массива
	newList[size - 2] = name;
	newList[size - 1] = phone;

	// освобождение памяти старого массива
	delete[] list;

	// присваивание нового массива старому
	// так как старый массив был передан по ссылке,
	// при обращении к "list" программа будет работать с памятью "newList"
	list = newList;
}

// нахождение списка контактов по имени или номеру телефона
//  list     - массив контактов
//  size     - рамзер массива
//  query    - ключевое слово для поиска
//  numFound - возвращаемое количесво найденных совпадений
std::string* find(std::string* list, int size, std::string query, int& numFound)
{
	numFound = 0;		// количество найденных элементов по запросу
	std::string* foundList = new std::string[1];	// массив найденных элементов
	// массив найденных элементов используется для корректной работы совпадений в имени и/или телефоне

	// для каждого элемента в массиве...
	for (int i = 0; i < size; i++)
	{
		// если текущий	элемент - имя или телефон нужного человека...
		if (list[i] == query)
		{
			// декрементировать индекс если текущий элемент непарный 
			// (т.е. если поиск производился по номеру телефона)
			// декремент в таком случае нужен для корректной работы программы
			if (i % 2)
				i--;

			// добавить элемент в список подходящих
			addEntry(foundList, numFound, list[i++], list[i]);
		}
	}

	// возвратить список найденных
	return foundList;
}

int main()
{
	// конфигурация раскладки консоли
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);

	// вывод начального текста на экран
	std::cout << "\t-= Задание 5 =- \n - программа/база данных с именами и номерами телефонов с возможностью поиска и добавления новых элементов.\n\n";

	int size = 2;	// размер массива контактов
	std::string* telephoneList = new std::string[size] { "Шелест Александр", "+380635934151" };

	// вводимый пользователем пункт меню
	int input = 0;

	// основной цикл программы
	// выполняется до тех пор, пока пользователь не выберет выход из программы
	while (input != 4)
	{
		// вывод меню на экран
		std::cout	<< "\t\t================\n"
					<< "\t\t||    МЕНЮ    ||\n"
					<< "\t\t================\n\n";

		std::cout	<< "\t1. Просмотр списка контактов.\n"
					<< "\t2. Поиск контакта.\n"
					<< "\t3. Добавление нового контакта в список.\n"
					<< "\t4. Выход из программы.\n\n";

		// запрос на ввод данных
		std::cout << "выберите действие используя номер соответствующкго пункта: ";
		std::cin >> input;
		std::cin.get(); // дополнительный ввод данных, защищает от некорректной работы cin.getline()

		// очистка экрана
		system("cls");

		// выполнение действий в зависимости от выбора пользователя
		switch (input)
		{
		case 1:	// вывод списка контактов на экран
			drawList(telephoneList, size);
			break;

		case 2: // поиск контакта
		{
			// запрос на ввод данных
			std::cout << "введите критерий для поиска(номер телефона или имя): ";
			char charQuery[128];
			std::cin.getline(charQuery, 128);
			// cin.getline() принимает только char*, так что сначала записываем в char*,
			// а затем в string
			std::string query = charQuery;

			// поиск контактов
			int numFound;	// количество совпадений
			std::string* found = find(telephoneList, size, query, numFound);

			// показ результатов поиска
			if (numFound > 0)
			{
				std::cout << "\nсовпадений найдено для \"" << charQuery << "\" - " << numFound / 2 << ":\n";
				drawList(found, numFound);
			}
			else
				std::cout << "\nсовпадений для \"" << charQuery << "\" не найдено.";

			// освобождение динамической памяти
			delete[] found;

			break;
		}

		case 3:	// добавление нового контакта в список
		{
			char charNameToAdd[128];
			char charPhoneToAdd[128];

			// запрос на ввод данных
			std::cout << "введите имя для нового контакта: ";
			std::cin.getline(charNameToAdd, 128);
			std::cout << "введите номер телефона для нового контакта: ";
			std::cin.getline(charPhoneToAdd, 128);

			// проверка на карректность
			if (strlen(charNameToAdd) == 0 || strlen(charPhoneToAdd) == 0)
			{
				std::cout << "\nдлина имени или телефона не может быть равна нулю.";
				break;
			}

			// cin.getline() принимает только char*, так что сначала записываем в char*,
			// а затем в string
			std::string nameToAdd = charNameToAdd;
			std::string phoneToAdd = charPhoneToAdd;

			// добавление нового контакта в список
			addEntry(telephoneList, size, nameToAdd, phoneToAdd);

			std::cout << "\nновый контакт успешно добавлен.";

			break;
		}
		case 4:	// выход из программы
			return 0;;

		default: // введение некорректных данных
			std::cout << "\n\nвведены некоректные данные.";
			break;
		}

		// пауза и возвращение в меню
		std::cout << "\n\nнажмите любую клавишу для выхода в меню...";
		_getwch();
		system("cls");
	}

	// освобождение динамической памяти
	delete[] telephoneList;

	// завершение программы
	return 0;
}
