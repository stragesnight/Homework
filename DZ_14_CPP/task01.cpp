/* ЗАДАНИЕ 1
	Группа: ПВ-011
	Ученик: Шелест Александр
	task01.cpp содержит функцию, добавляющую столбец двухмерному массиву в указанную позицию */

#include <iostream>
#include <windows.h>
#include <time.h>

// инициализация двухмерного массива случайными значениями
//	arr   - массив для инициализации
//	sizeX - размер линии
//	sizeY - размер столбца
void initArray(int** arr, int sizeX, int sizeY)
{
	// наполнение двухмерного массива значениями
	for (int y = 0; y < sizeY; y++)
	{
		for (int x = 0; x < sizeX; x++)
		{
			arr[y][x] = rand() % 10;
		}
	}
}

// вывод двухмерного массива на экран консоли
//	arr   - массив для вывода
//	sizeX - размер линии
//	sizeY - размер столбца
void drawArray(int** arr, int sizeX, int sizeY)
{
	// стандартный вывод двухмерного массива
	std::cout << "\n";
	for (int y = 0; y < sizeY; y++)
	{
		for (int x = 0; x < sizeX; x++)
		{
			std::cout << arr[y][x] << " ";
		}

		std::cout << "\n";
	}

	// декорация, вывод "ширины" массива, или же количества столбцов, под массивом
	std::cout << "<-";
	for (int i = 1; i < sizeX - 1; i++)
	{
		// вывод размера по середине линии
		if (i == sizeX / 2)
			if (sizeX % 2)
				std::cout << sizeX;
			else   // если число парное - сместиться на один символ назад (для выравнивания)
				std::cout << "\b" << sizeX << "-";
		else
			std::cout << "--";
	}

	std::cout << "->\n";
}

// вставка столбца в двухмерный массив в указанной позиции
//	arr   - ссылка на массив для обработки
//	data  - данные, которые будут вставлены
//	index - индекс столбца для вставки
//	sizeX - ссылка на размер линии
//	sizeY - размер столбца
void insertCollumn(int**& arr, int* data, int index, int& sizeX, int sizeY)
{
	// инкремент количества столбцов
	// так как эта переменная была переданна по ссылке,
	// это изменение распостранится на всю программу
	sizeX++;

	// объявление нового динамического двухмерного массива
	// который заменит старый
	int** newArray = new int* [sizeY];
	for (int i = 0; i < sizeY; i++)
		newArray[i] = new int[sizeX];

	// наполнение нового массива данными
	for (int y = 0; y < sizeY; y++)
	{
		for (int x = 0; x < sizeX; x++)
		{
			// копировать старый массив если ещё не нужно смещать столбцы
			if (x < index)
				newArray[y][x] = arr[y][x];
			// копировать новые данные, если текущий индекс равен указанному
			else if (x == index)
				newArray[y][x] = data[y];
			// иначе копировать старый массив, смещая данные на один индекс "правее"
			else
				newArray[y][x] = arr[y][x - 1];
		}
	}
	
	// освобождение памяти старого массива
	for (int i = 0; i < sizeY; i++)	
		delete[] arr[i];	// внутренние подмассивы
	delete[] arr;			// внешний массив

	// присвоение нового массива старому
	// так как изначальный массив был передан по ссылке,
	// теперь при обращению к "arr" будет происходить обращение к памяти "newArray"
	arr = newArray;
}

int main()
{
	// конфигурация раскладки консоли
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	// инициализация случайной генерации
	srand(time(0));

	// объявление переменных для начальной размерности массива
	int sizeX = 5;
	int sizeY = 5;

	// объявление динамического двухмерного массива
	int** arr = new int* [sizeY];	// внешний массив
	for (int i = 0; i < sizeY; i++)	
		arr[i] = new int[sizeX];	// внутренние подмассивы

	// объявление массива для пользовательских данных
	int* dataToInsert = new int[sizeY] {};

	// вывод начального текста на экран
	std::cout << "\t-= Задание 1 =- \n - написать функцию, добавляющую столбец двухмерному массиву в указанную позицию.\n";

	// наполнение массива данными
	initArray(arr, sizeX, sizeY);
	// вывод массива на экран
	drawArray(arr, sizeX, sizeY);

	// переменная для проверки нужды выхода из программы
	bool shouldExit = false;
	// главный цикл программы
	while (!shouldExit)
	{
		// запрос на ввод данных с клавиатуры
		std::cout << "\nвведите " << sizeY << " значени(-й/-я), которые будут вставленны в массив (в диапазаоне [0 - 9]): ";

		for (int i = 0; i < sizeY; i++)
			std::cin >> dataToInsert[i];

		// запрос на ввод дополнительных данных
		int indexToInsert;
		do
		{
			std::cout << "\nвведите индекс столбца, куда будут вставленны данные: ";
			std::cin >> indexToInsert;
		} while (indexToInsert < 0 || indexToInsert >= sizeX);

		// манипуляции с массивом
		insertCollumn(arr, dataToInsert, indexToInsert, sizeX, sizeY);
		// вывод массива на экран
		drawArray(arr, sizeX, sizeY);

		std::cout << "\nвыйти из программы? (0 - нет, 1 - да): ";
		std::cin >> shouldExit;
	}

	// освобождение динамической памяти
	for (int i = 0; i < sizeY; i++)
		delete[] arr[i];	// внутренние подмассивы
	delete[] arr;			// внешний массив
	// освобождение массива пользовательских данных
	delete[] dataToInsert;

	// пауза и завершение программы
	std::cout << "\n\nНажмите любую клавишу для выхода из программы...";
	_getwch();		// получение любого символа с клавиатуры
	return 0;
}