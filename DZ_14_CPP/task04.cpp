/* ЗАДАНИЕ 4
	Группа: ПВ-011
	Ученик: Шелест Александр
	task04.cpp содержит функцию, которая транспонирует матрицу */

#include <iostream>
#include <windows.h>
#include <time.h>

// инициализация матрицы случайными значениями
//	arr   - матрица для инициализации
//	sizeX - размер линии
//	sizeY - размер столбца
void initMatrix(int** mat, int sizeX, int sizeY)
{
	// инициализация двухмерного массива случайными значениями
	for (int y = 0; y < sizeY; y++)
	{
		for (int x = 0; x < sizeX; x++)
		{
			mat[x][y] = rand() % 10;
		}
	}
}

// вывод матрицы на экран с декоративным обрамлением
//	arr   - матрица для инициализации
//	sizeX - размер линии
//	sizeY - размер столбца
void drawMatrix(int** mat, int sizeX, int sizeY)
{
	// вывод верхней линии на экран
	std::cout << "\n+";
	for (int i = 0; i < sizeX * 4 - 1; i++)
		std::cout << "-";
	std::cout << "+\n";

	for (int y = 0; y < sizeY; y++)
	{
		// вывод непосредственно значений
		for (int x = 0; x < sizeX; x++)
			std::cout << "| " << mat[x][y] << " ";

		// переход на новую линию
		std::cout << "|\n";

		// если текущая линия - последняя, то вырваться из цикла
		if (y == sizeY - 1)
			break;

		// иначе, нарисовать "межрядовую" линию
		std::cout << "|";
		for (int i = 0; i < sizeX * 4 - 1; i++)
			std::cout << "-";
		std::cout << "|\n";
	}

	// вывод нижней линии на экран, идентична верхней
	std::cout << "+";
	for (int i = 0; i < sizeX * 4 - 1; i++)
		std::cout << "-";
	std::cout << "+\n";
}

// транспонирование матрицы
//	arr   - ссылка на матрицу для транспонирования
//	sizeX - ссылка на размер линии
//	sizeY - ссылка на размер столбца
void transposeMatrix(int**& mat, int& sizeX, int& sizeY)
{
	// замена линий на столбцы, а столбцов - на линии
	// так как используются ссылки, результат операции
	// будет ощутим и вне функции
	int tmp = sizeX;
	sizeX = sizeY;
	sizeY = tmp;

	// объявление невой матрицы
	int** newMat = new int* [sizeX];	// внешний массив
	for (int i = 0; i < sizeX; i++)
		newMat[i] = new int[sizeY];		// внутренние подмассивы

	// копирование значений из старой матрицы в новую
	for (int y = 0; y < sizeY; y++)
	{
		for (int x = 0; x < sizeX; x++)
			// [sizeX - 1 - x] вместо [x] используется для
			// более визуально понятного "поворота" матрицы - 
			// в таком случае матрица будто поворачивается по часовой стрелке
			// индексация старой матрицы отражена,
			// так как столбцы должны стать линиями и наоборот
			newMat[sizeX - 1 - x][y] = mat[y][x];
	}

	// освобождение динамической памяти старой матрицы
	for (int i = 0; i < sizeY; i++)
		delete[] mat[i];	// внутренние подмассивы
	delete[] mat;			// внешний массив


	// присвоение новой матрице старой
	// так как изначальная матрица была передана по ссылке,
	// теперь при обращению к "mat" будет происходить обращение к памяти "newMat"
	mat = newMat;
}

int main()
{
	// конфигурация раскладки консоли
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	// инициализация случайной генерации
	srand(time(0));

	// вывод начального текста на экран
	std::cout << "\t-= Задание 4 =- \n - написать функцию для транспонирования матрицы.\n";

	// объявление переменных для начальной размерности массива
	int sizeX = 4;
	int sizeY = 3;

	// запрос на ввод размерности матрицы
	std::cout << "\nвведите размерность матрицы {x, y}: ";
	std::cin >> sizeX >> sizeY;

	// объявление матрицы
	int** mat = new int* [sizeX];	// внешний массив
	for (int i = 0; i < sizeX; i++)
		mat[i] = new int[sizeY];	// внутренние подмассивы

	// инициализация матрицы случайными значениями
	initMatrix(mat, sizeX, sizeY);

	// переменная, используемая для проверки нужды продолжения программы
	bool shouldNotExit = true;
	while (shouldNotExit)
	{
		system("cls");
		// вывод начального состояния матрицы на экран
		std::cout << "матрица до транспонирования:";
		drawMatrix(mat, sizeX, sizeY);
		// произведение непосредственно транспонирования
		transposeMatrix(mat, sizeX, sizeY);
		// вывод результата действий на экран
		std::cout << "\nматрица после транспонирования:";
		drawMatrix(mat, sizeX, sizeY);

		// проверка нужды в продолжении работы программы
		std::cout << "\nпродолжить? (0 - нет, 1 - да): ";
		std::cin >> shouldNotExit;
	}

	// освобождение динамической памяти
	for (int i = 0; i < sizeX; i++)
		delete[] mat[i];	// внутренние подмассивы
	delete[] mat;			// внешний массив

	// пауза и завершение программы
	std::cout << "\n\nНажмите любую клавишу для выхода из программы...";
	_getwch();		// получение любого символа с клавиатуры
	return 0;
}
