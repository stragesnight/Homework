/* ЗАДАНИЕ 1

	Группа: ПВ-011
	Ученик: Шелест Александр

	task01.cpp представляет собой игру в кубики между игроком и компьютером. */
// Библиотека для работы с вводом-выводом данных
#include <iostream>
// Библиотека нужная для получения доступа к srand()
#include <stdlib.h>
// Библиотека нужная для получения системного времени
#include <time.h>

// Вызов этой комманды позволит не обращаться к std вручную
using namespace std;

// Основная функция программы
int main()
{
	// Добавление поддержки кириллицы
	setlocale(LC_ALL, "Russian");

	// Используя эту команду программа каждый раз будет генерировать разные числа
	srand(time(NULL));

	int exitChoise = 1;
	// Цикл, завершающийся если игрок решает выйти из игры
	while (exitChoise == 1)
	{
		int playerTotal = 0, AITotal = 0;

		// Очистка экрана консоли
		system("cls");

		// Вывод начального текста на экран
		cout<< "+==================+" << "\t+===================================================================================+\n"
			<< "||                ||" << "\t|| Вы с компьютером по очереди бросаете 2 игральных кубика на протяжении 3-х ходов ||\n"
			<< "||     КУБИКИ     ||" << "\t||            Победит тот, у кого по завершению игры будет больше очков!           ||\n"
			<< "||                ||" << "\t||      ---- для перехода на следующую фазу игры нажимайте клавишу Enter ----      ||\n"
			<< "+==================+" << "\t+===================================================================================+\n\n";

		// Пауза программы (продолжается при нажатии на Enter)
		cin.get();

		// Основной цикл программы для каждого хода
		for (int turn = 1; turn <= 6; turn++)
		{
			// Генерация случайных чисел для кубиков
			int tempResult1 = rand() % 5 + 1;
			int tempResult2 = rand() % 5 + 1;

			// Если ход нечётный (1, 3 или 5), то воспринимаем текущую итерацию цикла как ход игрока
			if (turn % 2)
			{
				cout<< "+-------------------+\n"
					<< "|       ХОД " << turn / 2 + 1 << "       |\n"
					<< "+-------------------+\n";

				cout << "> Вы бросаете два кубика...\n";
				// Увеличение счета игрока
				playerTotal += tempResult1 + tempResult2;
			}
			// Иначе воспринимаем текущую итерацию цикла как ход компьютера
			else
			{
				cout << "> Компьютер бросает два кубика...\n";
				// Увеличение счета компьютера
				AITotal += tempResult1 + tempResult2;
			}

			cout << "Результаты броска: " << tempResult1 << " и " << tempResult2 << "\n";

			// Пауза программы (продолжается при нажатии на Enter)
			cin.get();
		}


		// Очистка экрана консоли
		system("cls");

		cout<< "\t+====================================+\n"
			<< "\t||          РЕЗУЛЬТАТЫ ИГРЫ         ||\n"
			<< "\t+====================================+\n\n";

		cout << "\tОчки игрока: " << playerTotal << "\n";
		cout << "\tОчки компьютера: " << AITotal << "\n\n";

		// Если счет игрока больше счета компьютера...
		if (playerTotal > AITotal)
		{
			cout << "\t.:' Вы выиграли! Поздравляем! =) ':.\n\n";
			cout << "Кажется компьютер хочет отыграться... Начать игру заново? (1 = да, остальное = нет): ";
		}
		// Если счет компьютера больше...
		else if (AITotal > playerTotal)
		{
			cout << "\tО нет! Кажется компьютер выиграл...\n\n";
			cout << "Хотите ли вы реванша? (1 = да, остальное = нет): ";
		}
		// Иначе (если очки равны)...
		else
		{
			cout << "\tОго!! У вас ничья! о_О\n\n";
			cout << "Хотите ли вы сыграть ещё? (1 = да, остальное = нет): ";
		}

		// Запрос на ввод
		cin >> exitChoise;
		// Нужно для корректного отображения новой игры
		cin.get();
	}

	// Объявление успешного завершения программы
	return 0;
}
